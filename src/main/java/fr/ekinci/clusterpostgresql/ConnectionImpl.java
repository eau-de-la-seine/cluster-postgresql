package fr.ekinci.clusterpostgresql;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;


/**
 * A Connection class witch handle connections between application and sql cluster
 * 
 * Advancement : 50%
 * Tests : Need database connection, complete version of tests in another project : mock-postgresql-rendez_vous
 * 
 * @author Gokan EKINCI
 */
/* package visibility */ class ConnectionImpl implements Connection {
    private Connection originMasterConnection;
    
    public ConnectionImpl(Connection connection){
        originMasterConnection = connection;
    }
    
    @Override
    public Statement createStatement() throws SQLException {
        return new StatementImpl(
            originMasterConnection.createStatement()
        );
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return new StatementImpl(
            originMasterConnection.createStatement(resultSetType, resultSetConcurrency)
        );
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
            throws SQLException {
        return new StatementImpl(
            originMasterConnection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability)
        );
    }
    
    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        SQLRequestType sqlRequestType = SQLRequestType.getSQLRequestType(sql);
        Connection connection = (sqlRequestType == SQLRequestType.WRITE) ? 
                originMasterConnection : DataSourceManager.getConnectionToSlave();
        return new PreparedStatementImpl(
            connection.prepareStatement(sql), 
            connection, 
            sqlRequestType, 
            SQLRequestType.getSQLRequestDMLName(sql),
            originMasterConnection
        );
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
            throws SQLException {
        SQLRequestType sqlRequestType = SQLRequestType.getSQLRequestType(sql);
        Connection connection = (sqlRequestType == SQLRequestType.WRITE) ? 
                originMasterConnection : DataSourceManager.getConnectionToSlave();
        return new PreparedStatementImpl(
            connection.prepareStatement(sql, autoGeneratedKeys), 
            connection, 
            sqlRequestType, 
            SQLRequestType.getSQLRequestDMLName(sql),
            originMasterConnection
        );
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
            throws SQLException {
        SQLRequestType sqlRequestType = SQLRequestType.getSQLRequestType(sql);
        Connection connection = (sqlRequestType == SQLRequestType.WRITE) ? 
                originMasterConnection : DataSourceManager.getConnectionToSlave();
        return new PreparedStatementImpl(
                connection.prepareStatement(sql, columnIndexes), 
            connection, 
            sqlRequestType,
            SQLRequestType.getSQLRequestDMLName(sql),
            originMasterConnection
        );
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames)
            throws SQLException {
        SQLRequestType sqlRequestType = SQLRequestType.getSQLRequestType(sql);
        Connection connection = (sqlRequestType == SQLRequestType.WRITE) ? 
                originMasterConnection : DataSourceManager.getConnectionToSlave();        
        return new PreparedStatementImpl(
            connection.prepareStatement(sql, columnNames), 
            connection, 
            sqlRequestType,
            SQLRequestType.getSQLRequestDMLName(sql),
            originMasterConnection
        );
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
            throws SQLException {
        SQLRequestType sqlRequestType = SQLRequestType.getSQLRequestType(sql);
        Connection connection = (sqlRequestType == SQLRequestType.WRITE) ? 
                originMasterConnection : DataSourceManager.getConnectionToSlave();       
        return new PreparedStatementImpl(
            connection.prepareStatement(sql, resultSetType, resultSetConcurrency), 
            connection, 
            sqlRequestType,
            SQLRequestType.getSQLRequestDMLName(sql),
            originMasterConnection
        );
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {
        SQLRequestType sqlRequestType = SQLRequestType.getSQLRequestType(sql);
        Connection connection = (sqlRequestType == SQLRequestType.WRITE) ? 
                originMasterConnection : DataSourceManager.getConnectionToSlave();      
        return new PreparedStatementImpl(
            connection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability), 
            connection, 
            sqlRequestType,
            SQLRequestType.getSQLRequestDMLName(sql),
            originMasterConnection
        );
    }
    
    @Override
    public void close() throws SQLException {
        originMasterConnection.close();
    }

    @Override
    public void commit() throws SQLException {
        originMasterConnection.commit();
    }
    
    @Override
    public Savepoint setSavepoint() throws SQLException {
        return originMasterConnection.setSavepoint();
    }

    @Override
    public Savepoint setSavepoint(String name) throws SQLException {
        return originMasterConnection.setSavepoint(name);
    }
    
    @Override
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        originMasterConnection.releaseSavepoint(savepoint);
    }

    @Override
    public void rollback() throws SQLException {
        originMasterConnection.rollback();      
    }

    @Override
    public void rollback(Savepoint savepoint) throws SQLException {
        originMasterConnection.rollback(savepoint);
    }

    @Override
    public void setAutoCommit(boolean autoCommit) throws SQLException {
        originMasterConnection.setAutoCommit(autoCommit);
    }

    
    
    /* 
     * 
     * DO NOT MODIFY METHODS BELOW 
     * 
     */

    

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return originMasterConnection.isWrapperFor(iface);
    }
    
    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return originMasterConnection.unwrap(iface);
    }

    @Override
    public void abort(Executor executor) throws SQLException {
        originMasterConnection.abort(executor);
    }

    @Override
    public void clearWarnings() throws SQLException {
        originMasterConnection.clearWarnings();
    }

    @Override
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        return originMasterConnection.createArrayOf(typeName, elements);
    }

    @Override
    public Blob createBlob() throws SQLException {
        return originMasterConnection.createBlob();
    }

    @Override
    public Clob createClob() throws SQLException {
        return originMasterConnection.createClob();
    }

    @Override
    public NClob createNClob() throws SQLException {
        return originMasterConnection.createNClob();
    }

    @Override
    public SQLXML createSQLXML() throws SQLException {
        return originMasterConnection.createSQLXML();
    }

    @Override
    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        return originMasterConnection.createStruct(typeName, attributes);
    }

    @Override
    public boolean getAutoCommit() throws SQLException {
        return originMasterConnection.getAutoCommit();
    }

    @Override
    public String getCatalog() throws SQLException {
        return originMasterConnection.getCatalog();
    }

    @Override
    public Properties getClientInfo() throws SQLException {
        return originMasterConnection.getClientInfo();
    }

    @Override
    public String getClientInfo(String name) throws SQLException {
        return originMasterConnection.getClientInfo(name);
    }

    @Override
    public int getHoldability() throws SQLException {
        return originMasterConnection.getHoldability();
    }

    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        return originMasterConnection.getMetaData();
    }

    @Override
    public int getNetworkTimeout() throws SQLException {
        return originMasterConnection.getNetworkTimeout();
    }

    @Override
    public String getSchema() throws SQLException {
        return originMasterConnection.getSchema();
    }

    @Override
    public int getTransactionIsolation() throws SQLException {
        return originMasterConnection.getTransactionIsolation();
    }

    @Override
    public Map<String, Class<?>> getTypeMap() throws SQLException {
        return originMasterConnection.getTypeMap();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return originMasterConnection.getWarnings();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return originMasterConnection.isClosed();
    }

    @Override
    public boolean isReadOnly() throws SQLException {
        return originMasterConnection.isReadOnly();
    }

    @Override
    public boolean isValid(int timeout) throws SQLException {
        return originMasterConnection.isValid(timeout);
    }

    @Override
    public String nativeSQL(String sql) throws SQLException {
        return originMasterConnection.nativeSQL(sql);
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        return originMasterConnection.prepareCall(sql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency)
            throws SQLException {
        return originMasterConnection.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {
        return originMasterConnection.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public void setCatalog(String catalog) throws SQLException {
        originMasterConnection.setCatalog(catalog);
    }

    @Override
    public void setClientInfo(Properties properties) throws SQLClientInfoException {
        originMasterConnection.setClientInfo(properties);
    }

    @Override
    public void setClientInfo(String name, String value)
            throws SQLClientInfoException {
        originMasterConnection.setClientInfo(name, value);
    }

    @Override
    public void setHoldability(int holdability) throws SQLException {
        originMasterConnection.setHoldability(holdability);
    }

    @Override
    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
        originMasterConnection.setNetworkTimeout(executor, milliseconds);
    }

    @Override
    public void setReadOnly(boolean readOnly) throws SQLException {
        originMasterConnection.setReadOnly(readOnly);
    }

    @Override
    public void setSchema(String schema) throws SQLException {
        originMasterConnection.setSchema(schema);
    }

    @Override
    public void setTransactionIsolation(int level) throws SQLException {
        originMasterConnection.setTransactionIsolation(level);
    }

    @Override
    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
        originMasterConnection.setTypeMap(map);
    }

}
