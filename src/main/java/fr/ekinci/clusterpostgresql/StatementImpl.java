package fr.ekinci.clusterpostgresql;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import org.apache.log4j.Logger;

/**
 * Redefine Sql class statement to do statistic
 * 
 * Advancement : 100%
 * Tests : Need database connection, complete version of tests in another project : mock-postgresql-rendez_vous
 * 
 * @author Gokan EKINCI
 * @author Christian DAGO
 */
/* package visibility */ class StatementImpl implements java.sql.Statement {
	private final static Logger LOG = Logger.getLogger(StatementImpl.class);

    private Connection connectionToSlave;        
	private java.sql.Statement statementToMaster;
	
	/**
	 * constructor
	 * @param createStatement is original statement 
	 * @throws SQLException 
	 */
	public StatementImpl(Statement statementToMaster) throws SQLException {
		this.connectionToSlave = DataSourceManager.getConnectionToSlave();
		this.statementToMaster = statementToMaster;
	}

	/**
	 * redefine executeQuery for statistics
	 * @param Sql query starts With SELECT
	 */
	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		SQLRequestType type = SQLRequestType.getSQLRequestType(sql);
		ResultSet result = null;
		if(type == SQLRequestType.READ){	
			SQLRequestType.increment("SELECT");
			Statement localStatement = connectionToSlave.createStatement();
		     // Its close method will decrement SELECT counter
			result = new ResultSetImpl(localStatement.executeQuery(sql));
		}
		else{
			LOG.error("Bad request, use a SELECT request in executeQuery(String sql)");
			result = statementToMaster.executeQuery(sql); // Will throw an exception because it's not SELECT
		}
		return result;

	}
	
	/**
	 * redefine executeUpdate for statistics
	 * @param Sql query starts With SELECT
	 */
	@Override
	public int executeUpdate(String sql) throws SQLException {
		String dmlName = SQLRequestType.getSQLRequestDMLName(sql);
		SQLRequestType.increment(dmlName);
		try{
			return statementToMaster.executeUpdate(sql);
		} finally {
			SQLRequestType.decrement(dmlName);
		}
	}

	/**
	 * redefine executeUpdate for statistics
	 */
	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		String dmlName = SQLRequestType.getSQLRequestDMLName(sql);
		SQLRequestType.increment(dmlName);
		try{
			return statementToMaster.executeUpdate(sql, autoGeneratedKeys);
		} finally {
			SQLRequestType.decrement(dmlName);
		}
	}
	/**
	 * redefine executeUpdate for statistics
	 */
	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		String dmlName = SQLRequestType.getSQLRequestDMLName(sql);
		SQLRequestType.increment(dmlName);
		try{
			return statementToMaster.executeUpdate(sql, columnIndexes);
		} finally {
			SQLRequestType.decrement(dmlName);
		}
	}

	/**
	 * redefine executeUpdate for statistics
	 */
	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		String dmlName = SQLRequestType.getSQLRequestDMLName(sql);
		SQLRequestType.increment(dmlName);
		try{
			return statementToMaster.executeUpdate(sql, columnNames);
		} finally {
			SQLRequestType.decrement(dmlName);
		}
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		String dmlName = SQLRequestType.getSQLRequestDMLName(sql);
		SQLRequestType.increment(dmlName);
		try{
			return statementToMaster.execute(sql);
		} finally {
			SQLRequestType.decrement(dmlName);
		}
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {	
		String dmlName = SQLRequestType.getSQLRequestDMLName(sql);
		SQLRequestType.increment(dmlName);
		try{
			return statementToMaster.execute(sql, autoGeneratedKeys);
		} finally {
			SQLRequestType.decrement(dmlName);
		}
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		String dmlName = SQLRequestType.getSQLRequestDMLName(sql);
		SQLRequestType.increment(dmlName);
		try{
			return statementToMaster.execute(sql, columnIndexes);
		} finally {
			SQLRequestType.decrement(dmlName);
		}
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {	
		String dmlName = SQLRequestType.getSQLRequestDMLName(sql);
		SQLRequestType.increment(dmlName);
		try{
			return statementToMaster.execute(sql, columnNames);
		} finally {
			SQLRequestType.decrement(dmlName);
		}
	}
	/*---------------------Operation not redefine------------------------------*/
	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {		
		return statementToMaster.isWrapperFor(iface);
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {		
		return statementToMaster.unwrap(iface);
	}

	@Override
	public void addBatch(String sql) throws SQLException {		
		statementToMaster.addBatch(sql);
	}

	@Override
	public void cancel() throws SQLException {		
		statementToMaster.cancel();
	}

	@Override
	public void clearBatch() throws SQLException {		
		statementToMaster.clearBatch();
	}

	@Override
	public void clearWarnings() throws SQLException {		
		statementToMaster.clearWarnings();
	}

	@Override
	public void close() throws SQLException {	
	    try {
	        connectionToSlave.close();
	    } finally {
	        statementToMaster.close();
	    }
	}

	@Override
	public void closeOnCompletion() throws SQLException {		
		statementToMaster.closeOnCompletion();
	}

	@Override
	public int[] executeBatch() throws SQLException {		
		return statementToMaster.executeBatch();
	}

	@Override
	public Connection getConnection() throws SQLException {		
		return statementToMaster.getConnection();
	}

	@Override
	public int getFetchDirection() throws SQLException {		
		return statementToMaster.getFetchDirection();
	}

	@Override
	public int getFetchSize() throws SQLException {		
		return statementToMaster.getFetchSize();
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {		
		return statementToMaster.getGeneratedKeys();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {		
		return statementToMaster.getMaxFieldSize();
	}

	@Override
	public int getMaxRows() throws SQLException {		
		return statementToMaster.getMaxRows();
	}

	@Override
	public boolean getMoreResults() throws SQLException {		
		return statementToMaster.getMoreResults();
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {		
		return statementToMaster.getMoreResults(current);
	}

	@Override
	public int getQueryTimeout() throws SQLException {		
		return statementToMaster.getQueryTimeout();
	}

	@Override
	public ResultSet getResultSet() throws SQLException {		
		return statementToMaster.getResultSet();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {		
		return statementToMaster.getResultSetConcurrency();
	}

	@Override
	public int getResultSetHoldability() throws SQLException {		
		return statementToMaster.getResultSetHoldability();
	}

	@Override
	public int getResultSetType() throws SQLException {		
		return statementToMaster.getResultSetType();
	}

	@Override
	public int getUpdateCount() throws SQLException {		
		return statementToMaster.getUpdateCount();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {		
		return statementToMaster.getWarnings();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {		
		return statementToMaster.isCloseOnCompletion();
	}

	@Override
	public boolean isClosed() throws SQLException {		
		return statementToMaster.isClosed();
	}

	@Override
	public boolean isPoolable() throws SQLException {		
		return statementToMaster.isPoolable();
	}

	@Override
	public void setCursorName(String name) throws SQLException {		
		statementToMaster.setCursorName(name);
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {		
		statementToMaster.setEscapeProcessing(enable);
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {		
		statementToMaster.setFetchDirection(direction);
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {		
		statementToMaster.setFetchSize(rows);
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {		
		statementToMaster.setMaxFieldSize(max);
	}

	@Override
	public void setMaxRows(int max) throws SQLException {	
		statementToMaster.setMaxRows(max);
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		statementToMaster.setPoolable(poolable);
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		statementToMaster.setQueryTimeout(seconds);
	}

}